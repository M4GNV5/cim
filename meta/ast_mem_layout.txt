AST MEMORY LAYOUT FOR CIM
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
General info:
- size nodes always include their own size
- SIMPLE and VARIABLE are synonymous
- when there is a list with arg1 and arg2
  this represents an arbitrarily long list with 0 or more elements
- AST Nodes are layed out forwards in memory, Expressions and Types backwards.
  This is due to the order in which they are parsed
- identifiers are represented with type memory layout, because they can be scoped
--------------------------------------------------------------------------------
GROUPS:
any element from AST_NODES           : AST_NODE
any element from TYPES               : TYPE
any element from EXPRESSIONS         : SUB_EXPR
TYPE/SUB_EXPR                        : GENERIC_ARG

SIMPLE/SCOPED/GENERIC_STRUCT_DECL/
GENERIC_STRUCT_INST/
GENERIC_STRUCT_AMBIGUOUS            : SCOPE_TYPE

SCOPE_TYPE                          : base type
u8 type; u8 mods; u16 size;         : ptr0
u8 type; u8 mods; u16 size;         : ptr1
u8 type; u8 mods; u16 size;         : ptr2
...                                 : AMBIGUOUS_TYPE

AMBIGUOUS_TYPE                      : type
char* str;                          : name
u8 type; u16 size;                  : FN_PARAMETER_AMBIGUOUS
--------------------------------------------------------------------------------
EXPRESSIONS:

char* str; / var* resolved;         :
u8 type; u16 size = 2;              : VARIABLE

char* str; /lit* resolved;          :
u8 type; u16 size = 2;              : LITERAL (BIN-, DEC-, HEX- NUMBER, STRING,)

SUB_EXPR                            : preceeding operand
SUB_EXPR                            : following operand
u8 type; u8 opcode;u16 size;        : OPERATOR_LR

SUB_EXPR                            : operand
u8 type; u8 opcode;u16 size;        : OPERATOR_L

SUB_EXPR                            : operand
u8 type; u8 opcode;u16 size;        : OPERATOR_R

TYPE                                : type to cast into
SUB_EXPR                            : target expr
u8 type; u16 size;                  : CAST

TYPE                                : function identifier
SUB_EXPR                            : arg 1
SUB_EXPR                            : arg 2
u16 size;                           : args size
u8 type; u16 size;                  : FN_CALL

TYPE                                : function identifier
GENERIC_PARAM                       : generic arg 1
GENERIC_PARAM                       : generic arg 2
u16 size;                           : generic params size
SUB_EXPR                            : arg 1
SUB_EXPR                            : arg 2
u16 size;                           : normal params size
u8 type; u16 size;                  : GENERIC_FN_CALL

TYPE                                : type to index over
SUB_EXPR                            : index expression
u8 type; u16 size;                  : ARRAY_ACCESS


--------------------------------------------------------------------------------
TYPES:

char* str;                          : name
u8 type; u8 mods; u16 size=2        : SIMPLE

SCOPE_TYPE                          : scope identifier
char* str;                          : type identifier
u8 type; u8 mods; u16 size;         : SCOPED

TYPE                                : ret type
TYPE                                : arg type 1
TYPE                                : arg type 2
u16 size;                           : args size
u8 type; u8 mods; u16 size;         : FN PTR

TYPE                                : base type
u8 type; u8 mods; u16 size;         : PTR


TYPE                                : name
GENERIC_ARG                         : generic arg 1
GENERIC_ARG                         : generic arg 2
u16 size;                           : generic args size
u8 type; u8 mods; u16 size;         : GENERIC_STRUCT_INST

TYPE                                : name
FN_PARAMETER                        : generic param 1
FN_PARAMETER                        : generic param 2
u16 size;                           : generic params size
u8 type; u8 mods; u16 size;         : GENERIC_STRUCT_DECL

TYPE                                : name
FN_PARAMETER_AMBIGUOUS              : generic param 1
FN_PARAMETER_AMBIGUOUS              : generic param 2
u16 size;                           : generic params size
u8 type; u8 mods; u16 size;         : GENERIC_STRUCT_AMBIGUOUS

TYPE                                : array type
EXPRESSION                          : array_bounds_expr
u8 type; u8 mods; u16 size;         : ARRAY

--------------------------------------------------------------------------------
AST_NODES:

u8 type; u16 size;                  : EXPRESSION
SUB_EXPR                            : expression content

u32 full_size;                      : OWNED_BLOCK
AST_NODE                            : content 1
AST_NODE                            : content 2

u8 type;                            : FREE_BLOCK
u32 full_size;                      : block size
AST_NODE                            : content 1
AST_NODE                            : content 2


u8 type; u16 size;                  : TYPEDEF
char* name;                         : defined name
TYPE                                : aliased type

TYPE                                : type
char* str;                          : name
u8 type; u16 size;                  : FN_PARAMETER

u8 type; u16 size;                  : FN_DECLARATION
TYPE                                : return type
TYPE                                : fn name
FN_PARAMETER                        : param 1
FN_PARAMETER                        : param 2
u16 size;                           : params size
OWNED_BLOCK                         : fn body

u8 type; u16 size;                  : GENRIC_FN_DECLARATION
TYPE                                : return type
TYPE                                : function identifier
FN_PARAMETER                        : generic param 1
FN_PARAMETER                        : generic param 2
u16 size;                           : generic params size
FN_PARAMETER                        : param 1
FN_PARAMETER                        : param 2
u16 size;                           : params size
OWNED_BLOCK                         : function body

u8 type; u16 size;                  : GENERIC_STRUCT_DECLARATION
TYPE                                : struct name
FN_PARAMETER                        : generic param 1
FN_PARAMETER                        : generic param 2
ureg size;                          : generic params size
ureg size;                          : decl block size
AST_NODE                            : declaration 1
AST_NODE                            : declaration 2

u8 type; u16 size=1;                : STRUCT_DECLARATION
TYPE                                : struct name
ureg size;                          : decl block size
AST_NODE                            : declaration 1
AST_NODE                            : declaration 2

u8 type; u16 size;                  : VARIABLE_DECLARATION
TYPE                                : return type
TYPE                                : name

u8 type; u16 size;                  : FOR
AST_NODE                            : init statement
EXPRESSION                          : end condition
AST_NODE                            : iteration operation 1
AST_NODE                            : iteration operation 2
u16 size;                           : iteration operation size
OWNED_BLOCK                         : block

u8 type; u16 size;                  : WHILE
EXPRESSION                          : condition
OWNED_BLOCK                         : block

u8 type; u16 size;                  : IF
EXPRESSION                          : condition
OWNED_BLOCK                         : block

u8 type; u16 size;                  : IF_ELSE
EXPRESSION                          : condition
OWNED_BLOCK                         : true block
OWNED_BLOCK                         : false block
