generic_fn_call{int}(4, nested_fn_call(2), empty_generic_fn{}());
/*
int* foo{int* x}(int* x, int + 2);//test comments

int* foo{int * x}(int* x){

}

generic{int x}:int * int + 3;

foo{int * x}(int * x) % e;

sc:foo();

var * sc:foo{int}(3) + 4;


int foo{int* f}(float* f){}



char* foo(+a, int ************b);

generic{int x}:int foo(){}

fn_call_with_params(4, var);

int foo{float f, int t}(int x){}


foo(bar());

generic_fn_call{int}(x);




int foo(){}

foo();
int* foo(int(*)(char*) fn_ptr){bar();}

typedef sc x:td;
sco:ret_type ***** foo(a1* x, a2* x2, +int) + 3;


scoped:sc2:sc3:int[]**[]**[]*[]****[]*[x] x;


int**[y]**[x] x;
str[str_size-1] = '\a';
int* foo(int(*)(char*) fn_ptr){bar();}
intasdfhkjlaskljdf* foo{int* x}(int* x, int + 2);// lols
int* foo{int* x}(int* x){}
int* foo{int* x}(int* x){}
int* foo{int* x}(int* x);


int foo(int x){}

fn_call();

generic_fn_call{int}(x);
fn_call_nested(4, nested_fn_call(4, 1, nest_3()));

scoped:int[]**[]**[]*[]****[]*[x] x;

int alpha;

typedef td x;
typedef sc x:td;
typedef td generic{x};
typedef td scope:generic{x};
typedef td scope:generic{scope:nested};
typedef td scope:generic{nested_generic{x}};
typedef td scope:generic{scoped:nested_generic{x}};
typedef td void(*)(char*) (*)(int);
hms h;
hms_init(&h);
const int str_size = 6;
char[str_size] str;
/*
    for(char c0 = 'A'; c0 <= 'Z';c0++){
        str[0] = c0;
        for(char c1 = 'A'; c1 <= 'Z';c1++){
            str[1] = c1;
            for(char c2 = 'A'; c2 <= 'Z';c2++){
                str[2] = c2;
                for(char c3 = 'A'; c3 <= 'Z'; c3++){
                    str[3] = c3;
                    for(char c4 = 'A'; c4 <= 'Z'; c4++) {
                        str[4] = c4;
                        char *t = malloc(str_size);
                        memcpy(t, str, str_size);
                        hms_set(&h, t, "value");
                    }
                }

            }
        }
    }
    for(char c0 = 'A'; c0 <= 'Z';c0++){
        str[0] = c0;
        for(char c1 = 'A'; c1 <= 'Z';c1++){
            str[1] = c1;
            for(char c2 = 'A'; c2 <= 'Z';c2++){
                str[2] = c2;
                for(char c3 = 'A'; c3 <= 'Z'; c3++){
                    str[3] = c3;
                    for(char c4 = 'A'; c4 <= 'Z'; c4++) {
                        str[4] = c4;
                        hms_remove(&h, str);
                    }
                }

            }
        }
    }
    hms_dump(&h);
//*/