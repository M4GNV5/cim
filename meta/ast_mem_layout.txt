AST MEMORY LAYOUT FOR CIM
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
General info:
-size nodes always include their own size
--------------------------------------------------------------------------------
GROUPS:

OPERATOR_LR/OPERATOR/                :
VARIABLE/LITERAL                     : SUB_EXPR

SUB_EXPR/VARIABLE/LITERAL/           :
CANCER_MULTIPLY/                     :
SCOPED_CANCER_MULTIPLY               : ARGUMENT

SIMPLE/SCOPED/GENERIC_STRUCT/FN_PTR  : ANY_TYPE

ANY_TYPE/SUB_EXPR                    : GENERIC_PARAM

EXPRESSION/FN_DECLARATION/           : AST_NODE

SIMPLE/GENERIC_STRUCT/               :
|ANY_TYPE      |                     :
|AMBIGUOUS_TYPE|                     :
|SCOPED        |                     : REGULAR TYPE

--------------------------------------------------------------------------------
EXPRESSIONS:


u8 type;u8 op;u16 size;             : OPERATOR


SUB_EXPR                            : preceeding operand
SUB_EXPR                            : following operand
u8 type; u8 op; u16 size;           : OPERATOR_LR


char* str; /lit* resolved;          : 
u8 type; u16 size = 2;              : LITERAL (BIN-, DEC-, HEX- NUMBER, STRING,)


char* str; / var* resolved;         :
u8 type; u16 size = 2;              : VARIABLE

ANY_TYPE                            : var before *'s
char* right;                        : var after *'s
u8 type; u8 ptrs; u16 size;         : CANCER_PTRS (amount of ptrs)

SUB_EXPR                            : sub expr content continuation
SUB_EXPR                            : sub expr content start
u8 type;u16 size;                   : SUB_EXPR

ANY_TYPE                            : FN name
ARGUMENT                            : arg 1
ARGUMENT                            : arg 2
u16 size;                           : args size
u8 type; u16 size;                  : FN_CALL

char* str;                          : FN name
GENERIC_PARAM                       : generic arg 1
GENERIC_PARAM                       : generic arg 2
u16 size;                           : generic params size
ARGUMENT                            : arg 1
ARGUMENT                            : arg 2
u16 size;                           : normal params size
u8 type; u16 size;                  : GENERIC_FN_CALL

ANY_TYPE                            : type to index over
SUB_EXPR                            : index expression
u8 type; u16 size;                  : ARRAY_ACCESS
--------------------------------------------------------------------------------
TYPES:


char* str;                          : name
u8 type; u8 ptrs; u16 size;         : SIMPLE

ANY_TYPE                            : name
char* str;                          : name
u8 type; u8 ptrs; u16 size;         : SCOPED

ANY_TYPE                            : ret type
ANY_TYPE                            : arg type 1
ANY_TYPE                            : arg type 2
u16 size;                           : args size
u8 type; u8 ptrs; u16 size;         : FN PTR

ANY_TYPE                            : name
u8 type; u8 ptrs; u16 size;         : generic arg type 1
u8 type; u8 ptrs; u16 size;         : generic arg type 2
u16 size;                           : generic args size
u8 type; u8 ptrs; u16 size;         : GENERIC_STRUCT

ANY_TYPE                            : array type
EXPRESSION                          : array_bounds_expr
u8 type; u8 ptrs; u16 size;         : ARRAY

--------------------------------------------------------------------------------
AST_NODES:

u32 blk_size;                       : OWNED_BLOCK (size)
AST_NODE                            : content 1
AST_NODE                            : content 2

u8 type;                            : FREE_BLOCK
u32 blk_size;                       : block size
AST_NODE                            : content 1
AST_NODE                            : content 2

u8 type; u16 size;                  : EXPRESSION

u8 type; u16 size;                  : TYPEDEF
char* name;                         : defined name
ANY_TYPE                            : aliased type

ANY_TYPE                            :
char* str;                          :
u8 type; u16 size;                  : FN_PARAMETER

u8 type; u16 size;                  : FN_DECLARATION
ANY_TYPE                            : return type
ANY_TYPE                            : fn name
FN_PARAMETER                        : param 1
FN_PARAMETER                        : param 2
u16 size;                           : params size
OWNED_BLOCK                         : fn body

u8 type; u16 size;                  : GENRIC_FN_DECLARATION
ANY_TYPE                            : return type
ANY_TYPE                            : fn name
GENERIC_PARAM                       : generic param 1
GENERIC_PARAM                       : generic param 2
u16 size;                           : generic params size
FN_PARAMETER                        : param 1
FN_PARAMETER                        : param 2
u16 size;                           : params size
OWNED_BLOCK                         : fn body

u8 type; u16 size;                  : VARIABLE_DECLARATION
ANY_TYPE                            : return type
ANY_TYPE                            : name






 